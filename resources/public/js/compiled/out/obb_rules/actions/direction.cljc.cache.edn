;; Analyzed by ClojureScript 1.7.28
{:use-macros nil, :excludes #{update}, :name obb-rules.actions.direction, :imports nil, :requires {simplify obb-rules.simplifier, obb-rules.simplifier obb-rules.simplifier}, :uses nil, :defs {offset {:protocol-inline nil, :meta {:file "/Users/pedrosantos/projects/orionsbelt-battlegrounds/obb-rules/src/obb_rules/actions/direction.cljc", :line 4, :column 7, :end-line 4, :end-column 13, :arglists (quote ([dir])), :doc "Returns and adjacent offset of a direction"}, :name obb-rules.actions.direction/offset, :variadic false, :file "src/obb_rules/actions/direction.cljc", :end-column 13, :method-params ([dir]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 4, :max-fixed-arity 1, :fn-var true, :arglists (quote ([dir])), :doc "Returns and adjacent offset of a direction"}, update {:protocol-inline nil, :meta {:file "/Users/pedrosantos/projects/orionsbelt-battlegrounds/obb-rules/src/obb_rules/actions/direction.cljc", :line 13, :column 7, :end-line 13, :end-column 13, :arglists (quote ([dir [x y]])), :doc "Moves a coord given a direction"}, :name obb-rules.actions.direction/update, :variadic false, :file "src/obb_rules/actions/direction.cljc", :end-column 13, :method-params ([dir p__33763]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 13, :max-fixed-arity 2, :fn-var true, :arglists (quote ([dir [x y]])), :doc "Moves a coord given a direction"}, perpendicular {:protocol-inline nil, :meta {:file "/Users/pedrosantos/projects/orionsbelt-battlegrounds/obb-rules/src/obb_rules/actions/direction.cljc", :line 19, :column 7, :end-line 19, :end-column 20, :arglists (quote ([coord direction])), :doc "Gets the perpendicular coords for the given one"}, :name obb-rules.actions.direction/perpendicular, :variadic false, :file "src/obb_rules/actions/direction.cljc", :end-column 20, :method-params ([coord direction]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 19, :max-fixed-arity 2, :fn-var true, :arglists (quote ([coord direction])), :doc "Gets the perpendicular coords for the given one"}, other {:protocol-inline nil, :meta {:file "/Users/pedrosantos/projects/orionsbelt-battlegrounds/obb-rules/src/obb_rules/actions/direction.cljc", :line 26, :column 7, :end-line 26, :end-column 12, :arglists (quote ([dir])), :doc "Given a direction, returns all the other possible directions"}, :name obb-rules.actions.direction/other, :variadic false, :file "src/obb_rules/actions/direction.cljc", :end-column 12, :method-params ([dir]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 26, :max-fixed-arity 1, :fn-var true, :arglists (quote ([dir])), :doc "Given a direction, returns all the other possible directions"}, facing? {:protocol-inline nil, :meta {:file "/Users/pedrosantos/projects/orionsbelt-battlegrounds/obb-rules/src/obb_rules/actions/direction.cljc", :line 34, :column 7, :end-line 34, :end-column 14, :arglists (quote ([dir1 dir2])), :doc "True if the two given directions are facing each other"}, :name obb-rules.actions.direction/facing?, :variadic false, :file "src/obb_rules/actions/direction.cljc", :end-column 14, :method-params ([dir1 dir2]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 34, :max-fixed-arity 2, :fn-var true, :arglists (quote ([dir1 dir2])), :doc "True if the two given directions are facing each other"}, clockwise {:protocol-inline nil, :meta {:file "/Users/pedrosantos/projects/orionsbelt-battlegrounds/obb-rules/src/obb_rules/actions/direction.cljc", :line 43, :column 7, :end-line 43, :end-column 16, :arglists (quote ([dir])), :doc "Gets the direction achieved rotating the given direction clockwise"}, :name obb-rules.actions.direction/clockwise, :variadic false, :file "src/obb_rules/actions/direction.cljc", :end-column 16, :method-params ([dir]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 43, :max-fixed-arity 1, :fn-var true, :arglists (quote ([dir])), :doc "Gets the direction achieved rotating the given direction clockwise"}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:west :south :east :north}, :order [:south :north :east :west]}, :doc nil}